using System.Collections.Generic;
using System.Reflection;
using plamp.Abstractions.Ast.Node;

namespace plamp.Abstractions.Ast;

/// <summary>
/// Symbol table that matches node from ast and position in source code
/// Should be generated by parser for compiler and visitors
/// If node does not exist it should throw exception
/// </summary>
public interface ISymbolTable
{
    PlampException SetExceptionToNodeAndChildren(
        PlampExceptionRecord exceptionRecord, 
        NodeBase node,
        string fileName,
        AssemblyName assemblyName);
    
    PlampException SetExceptionToNodeWithoutChildren(
        PlampExceptionRecord exceptionRecord,
        NodeBase node,
        string fileName,
        AssemblyName assemblyName);
    
    List<PlampException> SetExceptionToChildren(
        PlampExceptionRecord exceptionRecord, 
        NodeBase node,
        string fileName,
        AssemblyName assemblyName);

    bool Contains(NodeBase node);

    bool TryGetChildren(NodeBase node, out IReadOnlyList<NodeBase> children);
}